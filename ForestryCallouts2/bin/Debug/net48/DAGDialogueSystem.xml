<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DAGDialogueSystem</name>
    </assembly>
    <members>
        <member name="T:DAGDialogueSystem.DialogueFunctions">
            <summary>
            Class used to iterate through dialogue.
            </summary>
        </member>
        <member name="F:DAGDialogueSystem.DialogueFunctions.DialogueMenu">
            <summary>
            Menu used for all dialogue options.
            </summary>
        </member>
        <member name="M:DAGDialogueSystem.DialogueFunctions.IterateDialogue(LSPD_First_Response.Mod.Callouts.Callout,Rage.Ped,DAGDialogueSystem.DirectedAcyclicGraph.Node,System.String,System.String)">
            <summary>
            Iterates through dialogue starting with the root node.
            </summary>
            <param name="callout"> current callout </param>
            <param name="converser"> the ped entity talking to the player</param>
            <param name="n"> root node </param>
            <param name="npcPrefix"> npc prefix that comes before dialogue string, can change color, but it is reset back to white before dialogue string </param>
            <param name="playerPrefix"> player prefix that comes before dialogue string, can change color, but it is reset back to white before dialogue string </param>
        </member>
        <member name="M:DAGDialogueSystem.DialogueFunctions.DisplayData(System.String)">
            <summary>
            Displays the node data in a subtitle.
            </summary>
            <param name="s"> the node's data </param>
        </member>
        <member name="M:DAGDialogueSystem.DialogueFunctions.Finish">
            <summary>
            Cleans up and resets the menu.
            </summary>
        </member>
        <member name="T:DAGDialogueSystem.Type">
            <summary>
            Type of nodes, Dialogue, Prompt, Option, and Action.
            </summary>
        </member>
        <member name="F:DAGDialogueSystem.Type.NpcDialogue">
            <summary>
            node dialogue line said by npc
            </summary>
        </member>
        <member name="F:DAGDialogueSystem.Type.PlayerDialogue">
            
             node dialogue line said by player
            
        </member>
        <member name="F:DAGDialogueSystem.Type.Prompt">
            <summary>
            node to initialize menu
            </summary>
        </member>
        <member name="F:DAGDialogueSystem.Type.Option">
            <summary>
            node to add dialogue line to prompt node
            </summary>
        </member>
        <member name="F:DAGDialogueSystem.Type.Action">
            <summary>
            node that runs an action
            </summary>
        </member>
        <member name="T:DAGDialogueSystem.DirectedAcyclicGraph">
            <summary>
            Main class for DAGDialogueSystem
            </summary>
        </member>
        <member name="T:DAGDialogueSystem.DirectedAcyclicGraph.Node">
            <summary>
            The node class for the Directed Acyclic Graph.
            </summary>
        </member>
        <member name="F:DAGDialogueSystem.DirectedAcyclicGraph.Node.Action">
            <summary>
            The method to be ran when in a action node
            </summary>
        </member>
        <member name="M:DAGDialogueSystem.DirectedAcyclicGraph.Node.#ctor(DAGDialogueSystem.Type,System.String)">
            <summary>
            Makes a new node in memory
            </summary>
            <param name="type"> the type of node, NodeTypes.Type </param>
            <param name="data"> dialogue string </param>
        </member>
        <member name="M:DAGDialogueSystem.DirectedAcyclicGraph.Node.#ctor(DAGDialogueSystem.Type,System.Action)">
            <summary>
            Makes a new action node
            </summary>
            <param name="type"> the type of node, NodeTypes.Type </param>
            <param name="action"> method name wanting to run if this node is chosen randomly or directly chosen if its the only edge </param>
        </member>
        <member name="M:DAGDialogueSystem.DirectedAcyclicGraph.Node.#ctor(DAGDialogueSystem.Type,System.Action,System.String)">
            <summary>
            Makes a new action node with dialogue
            </summary>
            <param name="type"> he type of node, NodeTypes.Type </param>
            <param name="action"> method name wanting to run if this node is chosen randomly or directly chosen if its the only edge </param>
            <param name="data"> dialogue line </param>
        </member>
        <member name="M:DAGDialogueSystem.DirectedAcyclicGraph.Node.GetNType">
            <summary>
            Gets the node type.
            </summary>
            <returns>Int</returns>
        </member>
        <member name="M:DAGDialogueSystem.DirectedAcyclicGraph.Node.GetData">
            <summary>
            Gets the node data.
            </summary>
            <returns>String</returns>
        </member>
        <member name="M:DAGDialogueSystem.DirectedAcyclicGraph.Node.GetEdges">
            <summary>
            Gets node edges.
            </summary>
            <returns>List</returns>
        </member>
        <member name="M:DAGDialogueSystem.DirectedAcyclicGraph.Node.GetNextNode">
            <summary>
            Gets the next node in the graph.
            </summary>
            <returns> Receiver of chosen edge </returns>
        </member>
        <member name="M:DAGDialogueSystem.DirectedAcyclicGraph.Node.AddNode(DAGDialogueSystem.Type,System.String)">
            <summary>
            Adds edge between this node and a new node with the type and data params.
            If multiple AddNodes take place on the same node. The top (most left) node will be
            the first edge.
            </summary>
            <param name="type"> the type of node, NodeTypes.Type </param>
            <param name="data">dialogue line in string format</param>
            <returns> Node </returns>
        </member>
        <member name="M:DAGDialogueSystem.DirectedAcyclicGraph.Node.AddActionNode(System.Action)">
            <summary>
            Adds a edge between this node and a new action node with no dialogue.
            </summary>
            <param name="method"> the method that needs to be ran</param>
            <returns></returns>
        </member>
        <member name="M:DAGDialogueSystem.DirectedAcyclicGraph.Node.AddActionNodeWithDialogue(System.Action,System.String)">
            <summary>
            Adds a edge between this node and a new action node with dialogue.
            </summary>
            <param name="method"> the method that needs to be ran </param>
            <param name="data"> dialogue line in string format </param>
            <returns></returns>
        </member>
        <member name="M:DAGDialogueSystem.DirectedAcyclicGraph.Node.LinkNodesAsParents(System.Collections.Generic.IEnumerable{DAGDialogueSystem.DirectedAcyclicGraph.Node})">
            <summary>
            Links n amount of nodes as parents (senders) of this node. 
            </summary>
            <param name="childNodes"> IEnumerable list of nodes </param>
        </member>
        <member name="M:DAGDialogueSystem.DirectedAcyclicGraph.Node.ConnectTo(DAGDialogueSystem.DirectedAcyclicGraph.Node)">
            <summary>
            Connects this node and target node with edge.
            </summary>
            <param name="target"> node that needs connecting </param>
        </member>
        <member name="M:DAGDialogueSystem.DirectedAcyclicGraph.Node.EdgesCount">
            returns the amount of edges that node has.
        </member>
        <member name="M:DAGDialogueSystem.DirectedAcyclicGraph.Node.GetFirstEdge">
            returns the first edge of node.
        </member>
        <member name="M:DAGDialogueSystem.DirectedAcyclicGraph.Node.GetEdgeAtIndex(System.Int32)">
            gets edge at index.
            <param name="i"> the index of needed edge </param>>
        </member>
        <member name="T:DAGDialogueSystem.DirectedAcyclicGraph.Edge">
            <summary>
            The arrow in between nodes.
            </summary>
        </member>
        <member name="T:DAGDialogueSystem.Logger">
            <summary>
            Logs dialogue info to DAGDialogueSystemLOG
            </summary>
        </member>
        <member name="M:DAGDialogueSystem.Logger.ResetLog">
            <summary>
            Deletes the DAGDialogueSystemLOG, the next Logger.Log will create a new one.
            </summary>
        </member>
        <member name="M:DAGDialogueSystem.Logger.Log(System.String)">
            <summary>
            Logs a message to DAGDialgoueSystemLOG file.
            </summary>
            <param name="message"> the message</param>
        </member>
    </members>
</doc>
